plotlyOutput("numModalidad")
)
)
)
library(shiny)
library(tidyverse)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"))
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
selectInput(inputId = "modalidades",
label = "Tipo de modalidad:",
choices = modalidad, multiple = T)
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotlyOutput("numModalidad")
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$modalidades)) {
df <- df %>%
dplyr::filter(modalidad %in% input$modalidades)
}
casos_1 <-  df %>%
group_by(modalidad) %>%
tally() %>%
select(modalidad, n)
casos_1
})
output$numModalidad <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~modalidad, y = ~n, type = "bar")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
selectInput(inputId = "modalidades",
label = "Tipo de modalidad:",
choices = modalidad, multiple = T),
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotlyOutput("numModalidad")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$modalidades)) {
df <- df %>%
dplyr::filter(modalidad %in% input$modalidades)
}
casos_1 <-  df %>%
group_by(modalidad) %>%
tally() %>%
select(modalidad, n)
casos_1
})
output$numModalidad <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~modalidad, y = ~n, type = "bar")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
selectInput(inputId = "modalidades",
label = "Tipo de modalidad:",
choices = modalidad, multiple = T),
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotlyOutput("numModalidad")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$modalidades)) {
df <- df %>%
dplyr::filter(modalidad %in% input$modalidades)
}
casos_1 <-  df %>%
group_by(modalidad) %>%
tally() %>%
select(modalidad, n)
casos_1
})
output$numModalidad <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~modalidad, y = ~n, type = "bar", xlab = "Tipo de modalidad")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
selectInput(inputId = "modalidades",
label = "Tipo de modalidad:",
choices = modalidad, multiple = T),
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotlyOutput("numModalidad")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$modalidades)) {
df <- df %>%
dplyr::filter(modalidad %in% input$modalidades)
}
casos_1 <-  df %>%
group_by(modalidad) %>%
tally() %>%
select(modalidad, n)
casos_1
})
output$numModalidad <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~modalidad, y = ~n, type = "bar")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
selectInput(inputId = "modalidades",
label = "Tipo de modalidad:",
choices = modalidad, multiple = T),
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotlyOutput("numModalidad")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$modalidades)) {
df <- df %>%
dplyr::filter(modalidad %in% input$modalidades)
}
casos_1 <-  df %>%
group_by(modalidad) %>%
tally() %>%
select(modalidad, n)
casos_1
})
output$numModalidad <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~modalidad, y = ~n, type = "bar")
})
}
# Creación y visualización de la aplicación Shiny
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(ggplot2)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
edad <- unique(feminicidios$edad)
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
sliderInput(inputId = "rango_edad",
label = "Rango de edad:",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
textOutput("edadesrango")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
output$edadesrango <- renderText(input$rango_edad)
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
selectInput(inputId = "modalidades",
label = "Tipo de modalidad:",
choices = modalidad, multiple = T),
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotlyOutput("numModalidad")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$modalidades)) {
df <- df %>%
dplyr::filter(modalidad %in% input$modalidades)
}
casos_1 <-  df %>%
group_by(modalidad) %>%
tally() %>%
select(modalidad, n)
casos_1
})
output$numModalidad <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~modalidad, y = ~n, type = "bar")
})
}
# Creación y visualización de la aplicación Shiny
shinyApp(ui = ui, server = server)
library(shiny); runApp('Slide_range_prueba.R')
library(shiny)
library(tidyverse)
library(ggplot2)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
edad <- unique(feminicidios$edad)
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
sliderInput(inputId = "rango_edad",
label = "Rango de edad:",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotOutput("edadesrango")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$rango_edad)) {
df <- df %>%
dplyr::filter(edad %in% input$rango_edad)
}
casos_1 <-  df %>%
group_by(edad) %>%
tally() %>%
select(edad, n)
casos_1
})
output$numModalidad <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~edad, y = ~n, type = "bar")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(ggplot2)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
edad <- unique(feminicidios$edad)
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
sliderInput(inputId = "rango_edad",
label = "Rango de edad:",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotOutput("edadesrango")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$rango_edad)) {
df <- df %>%
dplyr::filter(edad %in% input$rango_edad)
}
casos_1 <-  df %>%
group_by(edad) %>%
tally() %>%
select(edad, n)
casos_1
})
output$edadesrango <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~edad, y = ~n, type = "bar")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(ggplot2)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
edad <- unique(feminicidios$edad)
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
sliderInput(inputId = "rango_edad",
label = "Rango de edad:",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotOutput("edadesrango")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$rango_edad)) {
df <- df %>%
dplyr::filter(edad %in% input$rango_edad)
}
casos_1 <-  df %>%
group_by(edad) %>%
tally() %>%
select(edad, n)
casos_1
})
output$edadesrango <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~edad, y = ~n, type = "hist")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
library(ggplot2)
library(plotly)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
edad <- unique(feminicidios$edad)
ui <- fluidPage(
# Título de la aplicación
titlePanel("Feminicidios en colombia 2017"),
# Definicion de los Inputs y los Outputs
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Explicación de cuales son los inputs
sliderInput(inputId = "rango_edad",
label = "Rango de edad:",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Panel para los outputs
mainPanel(
# Output que muestra el panel de la modalidad escogida por el usuario
plotOutput("edadesrango")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
data_viz <- reactive({
df <- feminicidios
if (!is.null(input$rango_edad)) {
df <- df %>%
dplyr::filter(edad %in% input$rango_edad)
}
casos_1 <-  df %>%
group_by(edad) %>%
tally() %>%
select(edad, n)
casos_1
})
output$edadesrango <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~edad, y = ~n, type = "bar")
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
view(edad)
View(feminicidios)
output$edadesrango <- renderPlotly({
req(data_viz())
plot_ly(data_viz(), x = ~edad, y = ~n, type = "bar")
})
