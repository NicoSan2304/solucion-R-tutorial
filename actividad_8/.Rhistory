# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# App title ----
titlePanel("Feminicidios en colombia 2017"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Tipo de modalidad:",
choices = modalidad),
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "obs",
label = "Number of observations to view:",
value = 10)
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
runExample("05_sliders")
edad <- unique(feminicidios$edad)
min(edad
)
max(edad)
library(shiny)
runExample("05_sliders")
library(shiny)
runExample("05_sliders")
library(shiny)
runExample("05_sliders")
library(shiny)
runExample("05_sliders")
library(shiny)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
departamento <- unique(feminicidios$departamento)
relacion <- unique(feminicidios$relacion_victima)
edad <- unique(feminicidios$edad)
min(edad)
max(edad)
ui <- fluidPage(
# App title ----
titlePanel("Feminicidios en colombia 2017"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Tipo de modalidad:",
choices = modalidad),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Seleccione el departamento:",
choices = departamento),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Relación existente entre la victima y su agresor:",
choices = relacion),
sliderInput(inputId = "femenicidios"
label = "Edad de la victima"
library(shiny)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
departamento <- unique(feminicidios$departamento)
relacion <- unique(feminicidios$relacion_victima)
edad <- unique(feminicidios$edad)
min(edad)
max(edad)
ui <- fluidPage(
# App title ----
titlePanel("Feminicidios en colombia 2017"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Tipo de modalidad:",
choices = modalidad),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Seleccione el departamento:",
choices = departamento),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Relación existente entre la victima y su agresor:",
choices = relacion),
sliderInput(inputId = "femenicidios",
label = "Edad de la victima",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
departamento <- unique(feminicidios$departamento)
relacion <- unique(feminicidios$relacion_victima)
edad <- unique(feminicidios$edad)
min(edad)
max(edad)
ui <- fluidPage(
# App title ----
titlePanel("Feminicidios en colombia 2017"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Tipo de modalidad:",
choices = modalidad),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Seleccione el departamento:",
choices = departamento),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Relación existente entre la victima y su agresor:",
choices = relacion),
sliderInput(inputId = "femenicidios",
label = "Rango de edad",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
datasetInput <- reactive({
switch(input$feminicidios,
"modalidad" = modalidad,
"departamento" = departamento,
"relacion" = relacion)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
feminicidios <- feminicidiosInput()
summary(feminicidios)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(feminicidiosInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
departamento <- unique(feminicidios$departamento)
relacion <- unique(feminicidios$relacion_victima)
edad <- unique(feminicidios$edad)
min(edad)
max(edad)
ui <- fluidPage(
# App title ----
titlePanel("Feminicidios en colombia 2017"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Tipo de modalidad:",
choices = modalidad),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Seleccione el departamento:",
choices = departamento),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Relación existente entre la victima y su agresor:",
choices = relacion),
sliderInput(inputId = "femenicidios",
label = "Rango de edad",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
feminicidiosInput <- reactive({
switch(input$feminicidios,
"modalidad" = modalidad,
"departamento" = departamento,
"relacion" = relacion)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
feminicidios <- feminicidiosInput()
summary(feminicidios)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(feminicidiosInput(), n = input$obs)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
departamento <- unique(feminicidios$departamento)
relacion <- unique(feminicidios$relacion_victima)
edad <- unique(feminicidios$edad)
min(edad)
max(edad)
ui <- fluidPage(
# App title ----
titlePanel("Feminicidios en colombia 2017"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Tipo de modalidad:",
choices = modalidad),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Seleccione el departamento:",
choices = departamento),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Relación existente entre la victima y su agresor:",
choices = relacion),
sliderInput(inputId = "femenicidios",
label = "Rango de edad",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
feminicidiosInput <- reactive({
switch(input$feminicidios,
"modalidad" = modalidad,
"departamento" = departamento,
"relacion" = relacion)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
feminicidios <- feminicidiosInput()
summary(feminicidios)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(feminicidiosInput(), n = input$edad)
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
library(shiny)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
departamento <- unique(feminicidios$departamento)
relacion <- unique(feminicidios$relacion_victima)
edad <- unique(feminicidios$edad)
min(edad)
max(edad)
ui <- fluidPage(
# App title ----
titlePanel("Feminicidios en colombia 2017"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Tipo de modalidad:",
choices = modalidad),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Seleccione el departamento:",
choices = departamento),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Relación existente entre la victima y su agresor:",
choices = relacion),
sliderInput(inputId = "femenicidios",
label = "Rango de edad",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
feminicidiosInput <- reactive({
switch(input$feminicidios,
"modalidad" = modalidad,
"departamento" = departamento,
"relacion" = relacion)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
feminicidios <- feminicidiosInput()
summary(feminicidios)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(feminicidiosInput(), n = input$obs, is.na(input$obs))
})
}
# Create Shiny app ----
shinyApp(ui = ui, server = server)
head(feminicidiosInput(), n = input$value))
library(shiny)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
departamento <- unique(feminicidios$departamento)
relacion <- unique(feminicidios$relacion_victima)
edad <- unique(feminicidios$edad)
min(edad)
max(edad)
ui <- fluidPage(
# App title ----
titlePanel("Feminicidios en colombia 2017"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Tipo de modalidad:",
choices = modalidad),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Seleccione el departamento:",
choices = departamento),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Relación existente entre la victima y su agresor:",
choices = relacion),
sliderInput(inputId = "femenicidios",
label = "Rango de edad",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Verbatim text for data summary ----
verbatimTextOutput("summary"),
# Output: HTML table with requested number of observations ----
tableOutput("view")
)
)
)
# Define server logic to summarize and view selected dataset ----
server <- function(input, output) {
# Return the requested dataset ----
feminicidiosInput <- reactive({
switch(input$feminicidios,
"modalidad" = modalidad,
"departamento" = departamento,
"relacion" = relacion)
})
# Generate a summary of the dataset ----
output$summary <- renderPrint({
feminicidios <- feminicidiosInput()
summary(feminicidios)
})
# Show the first "n" observations ----
output$view <- renderTable({
head(feminicidiosInput(), n = input$value))
library(shiny)
library(tidyverse)
feminicidios <- read.csv("cases_2017.csv", na.strings = c("Sin información","NA"))
modalidad <- unique(feminicidios$modalidad)
feminicidios$modalidad[is.na(feminicidios$modalidad)] <- "No hay información"
departamento <- unique(feminicidios$departamento)
relacion <- unique(feminicidios$relacion_victima)
edad <- unique(feminicidios$edad)
min(edad)
max(edad)
ui <- fluidPage(
# App title ----
titlePanel("Feminicidios en colombia 2017"),
# Sidebar layout with a input and output definitions ----
sidebarLayout(
# Sidebar panel for inputs ----
sidebarPanel(
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Tipo de modalidad:",
choices = modalidad),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Seleccione el departamento:",
choices = departamento),
# Input: Selector for choosing dataset ----
selectInput(inputId = "feminicidios",
label = "Relación existente entre la victima y su agresor:",
choices = relacion),
sliderInput(inputId = "femenicidios",
label = "Rango de edad",
min(0, na.rm = 0), max(100, na.rm = 0), value = c(20,50))
# Input: Numeric entry for number of obs to view ----
numericInput(inputId = "feminicidios",
